	 ########################################################
	##														##
	## 						Bonita Console					##
	##														##
 	 ########################################################
 

Structure:

		parent pom.xml:
			Contains the common configuration such as:
			 * the definition of all the dependencies version, e.g., junit.version, bonita.version, gwt.version;
			 * the maven repositories

	Console module:

		console-model:
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the model definition.
			
		console-rpc:
			(depends on console-model, gwt-user, gwt-servlet)
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the client-server communication.
		
		console-server:
			(depends on console-model, console-rpc, bonita-client, console-common, ...)
			Contains the back-end business logic, i.e., the code executed on the server side.
		
		console-view:
			(depends on console-model, console-rpc, security-view, security-rpc, ...)
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the client, i.e., the code cross-compiled to javascript and all the resources; 
		
		console-war:
			(depends on console-view, console-server, forms-view, forms-server, security-view, security-server, bonita-server, ...)
			Build the user XP web application
		
	Form module:
		
		forms-model:
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the model definition.
			
		forms-rpc:
			(depends on forms-model, gwt-user, gwt-servlet)
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the client-server communication.
		
		forms-server:
			(depends on forms-model, forms-rpc, bonita-client, console-common ...)
			Contains the back-end business logic, i.e., the code executed on the server side.

		forms-view:
			(depends on forms-model, forms-rpc, security-view, security-rpc, ...)
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the client, i.e., the code cross-compiled to javascript and all the resources; 
		
		forms-application:
			(depends on forms-view, forms-server, security-view, security-server, bonita-server, ...)
			Build a generic process application (without forms.xml)

	Security module (used by console module and form module):

		security-model:
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the model definition.
			
		security-rpc:
			(depends on security-model, gwt-user, gwt-servlet)
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the client-server communication.
		
		security-server:
			(depends on security-model, security-rpc, bonita-client, ...)
			Contains the back-end business logic, i.e., the code executed on the server side.

		security-view:
			(depends on security-model, security-rpc, ...)
			(defines the src/main/java folder as a resource directory to have the source code packaged in the module. This is necessary for the compilation of modules that depend on it.)
			Contains the source code of the client, i.e., the code cross-compiled to javascript and all the resources; 

Common server module :

		console-common:
			Contains some utility methods common used by both console-server and forms-server

Tomcat build :

		console-tomcat:
			(depends on console-war, forms-application, apache-tomcat)
			It is responsible for the packaging of a tomcat including the user XP, the generic forms application and the engine.
	
Compilation (command line) :
		
	at root level (same location as the parent pom.xml) :
		mvn clean install
		
Execution in hosted mode for debug (command line) :

	in console-war :
		mvn gwt-maven:gwt
		
Projects import in eclipse :

	to import those projects in eclipse :
		- execute mvn eclipse:eclipse to generate the .project and .classpath files
		use the import context menu item and select the "Existing projects into workspace" wizard
	or  - use Sonatype's Maven integration for eclipse plugin      
